// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String       @unique
  mobileNo    String       @unique
  password    String
  createdAt   DateTime     @default(now())
  memberships TripMember[]
}

model Trip {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  destination String
  departDate  DateTime
  returnDate  DateTime
  budget      Float?
  groupName   String?
  createdAt   DateTime     @default(now())
  memberships TripMember[]
}

model TripMember {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  trip   Trip   @relation(fields: [tripId], references: [id])
  tripId String @db.ObjectId
}

model OTP {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  otp        String
  expire_at  DateTime
  created_at DateTime @default(now())
}

model Expense {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tripId    String   @db.ObjectId
  paidBy    String   @db.ObjectId
  amount    Float
  category  String
  note      String?
  date      DateTime @default(now())
  location  String?
  photoUrl  String?
  createdAt DateTime @default(now())

  shares ExpenseShare[]
}

model ExpenseShare {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  expenseId  String  @db.ObjectId
  userId     String  @db.ObjectId
  owedAmount Float
  Expense    Expense @relation(fields: [expenseId], references: [id])
}
